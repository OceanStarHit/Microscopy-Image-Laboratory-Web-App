version: "3.8"

services:

  mainapi:
    build:
      context: .
      dockerfile: mainApi/Dockerfile
    ports:
      - 8000:8000
    env_file:
      - ./env_files/fastApi.env
      - ./env_files/mongoDB_connect.env
      - ./env_files/celery_tasks.env
    depends_on:
      - mongo
      - rabbitmq

    volumes:
      - image-storage:/image-storage
      - cache-storage:/cache-storage
      ## for faster debug, remove for production
      - ./mainApi:/app/mainApi:rm
      - ./shared_utils:/app/shared_utils:rm
      - ./celery_tasks:/app/celery_tasks:rm

    command: ["sh", "./mainApi/start.sh"]

  mongo:
    image: mongo:latest
    restart: unless-stopped
    ports:
      - 27017
    volumes:
      - mongoDbData:/data/db
    env_file:
      - ./env_files/mongoDb.env


  mongo-express:
    image: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    env_file:
      - ./env_files/mongo-express.env
    depends_on:
      - mongo


  ## worker broker
  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - ./env_files/celery_tasks.env
    ports:
      - 5672:5672
      - 15672:15672 # management
    restart: unless-stopped
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure


  ## celery monitor
  flower:
    image: zoomeranalytics/flower:0.9.1-4.0.2
    restart: "no"
    env_file:
      - ./env_files/celery_tasks.env
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq


  ## stitching worker
  stitching_worker:
    build:
      context: .
      dockerfile: ./stitching/Dockerfile
    restart: "no"
    env_file:
      - ./env_files/celery_tasks.env
    command: ["celery", "-A", "main", "worker", "--concurrency=4", "--loglevel=info", "-n", "stitching_worker.%h"]
    volumes:
      - image-storage:/image-storage
      - cache-storage:/cache-storage

      - ./stitching:/app
      - ./shared_utils:/app/shared_utils:ro
      - ./celery_tasks:/app/celery_tasks:ro

    depends_on:
      - rabbitmq

  ## Deconvolution_2D worker
  ddconvolution_worker:
    build:
      context: .
      dockerfile: ./Deconvolution_2D/Dockerfile
    restart: "no"
    env_file:
      - ./env_files/celery_tasks.env
    # command: ["celery", "-A", "main", "worker", "--concurrency=4", "--loglevel=info", "-n", "ddconvolution_worker.%h"]
    volumes:
      - ./Deconvolution_2D:/app
      - ./shared_utils:/app/shared_utils:ro
      - ./celery_tasks:/app/celery_tasks:ro

    depends_on:
      - rabbitmq
      
  ## Deconvolution_3D worker
  dddconvolution_worker:
    build:
      context: .
      dockerfile: ./Deconvolution_3D/Dockerfile
    restart: "no"
    env_file:
      - ./env_files/celery_tasks.env
    # command: ["celery", "-A", "main", "worker", "--concurrency=4", "--loglevel=info", "-n", "dddconvolution_worker.%h"]
    volumes:
      - ./Deconvolution_3D:/app
      - ./shared_utils:/app/shared_utils:ro
      - ./celery_tasks:/app/celery_tasks:ro

    depends_on:
      - rabbitmq
      
  ## FocusStack worker
  focusstack_worker:
    build:
      context: .
      dockerfile: ./FocusStack/Dockerfile
    restart: "no"
    env_file:
      - ./env_files/celery_tasks.env
    # command: ["celery", "-A", "main", "worker", "--concurrency=4", "--loglevel=info", "-n", "focusstack_worker.%h"]
    volumes:
      - ./FocusStack:/app
      - ./shared_utils:/app/shared_utils:ro
      - ./celery_tasks:/app/celery_tasks:ro

    depends_on:
      - rabbitmq
      
  ## SRRF worker
  srrf_worker:
    build:
      context: .
      dockerfile: ./SRRF/Dockerfile
    restart: "no"
    env_file:
      - ./env_files/celery_tasks.env
    # command: ["celery", "-A", "main", "worker", "--concurrency=4", "--loglevel=info", "-n", "srrf_worker.%h"]
    volumes:
      - ./SRRF:/app
      - ./shared_utils:/app/shared_utils:ro
      - ./celery_tasks:/app/celery_tasks:ro

    depends_on:
      - rabbitmq

volumes:
  mongoDbData:

  image-storage:
  cache-storage: